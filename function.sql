CREATE FUNCTION skasowano() RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
RAISE NOTICE 'Skasowano rekord';
RETURN NEW;
END;
$$;

CREATE TRIGGER tr_kompania_del AFTER DELETE ON kompania FOR EACH ROW
EXECUTE PROCEDURE skasowano();

CREATE TRIGGER tr_kompania_del_2 AFTER DELETE ON kompania FOR EACH STATEMENT
EXECUTE PROCEDURE skasowano();

CREATE TRIGGER tr_pluton_del AFTER DELETE ON pluton FOR EACH ROW
EXECUTE PROCEDURE skasowano();

CREATE TRIGGER tr_pluton_del_2 AFTER DELETE ON pluton FOR EACH STATEMENT
EXECUTE PROCEDURE skasowano();

CREATE TRIGGER tr_druzyna_del AFTER DELETE ON druzyna FOR EACH ROW
EXECUTE PROCEDURE skasowano();

CREATE TRIGGER tr_druzyna_del_2 AFTER DELETE ON druzyna FOR EACH STATEMENT
EXECUTE PROCEDURE skasowano();

CREATE TRIGGER tr_nalezy_del AFTER DELETE ON nalezy FOR EACH ROW
EXECUTE PROCEDURE skasowano();

CREATE TRIGGER tr_nalezy_del_2 AFTER DELETE ON nalezy FOR EACH STATEMENT
EXECUTE PROCEDURE skasowano();

CREATE TRIGGER tr_zolnierz_del AFTER DELETE ON zolnierz FOR EACH ROW
EXECUTE PROCEDURE skasowano();

CREATE TRIGGER tr_zolnierz_del_2 AFTER DELETE ON zolnierz FOR EACH STATEMENT
EXECUTE PROCEDURE skasowano();

CREATE FUNCTION zmieniono() RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
RAISE NOTICE 'Zmieniono rekord';
RETURN NEW;
END;
$$;

CREATE TRIGGER tr_kompania_upd AFTER UPDATE ON kompania FOR EACH ROW
EXECUTE PROCEDURE zmieniono();

CREATE TRIGGER tr_kompania_upd_2 AFTER UPDATE ON kompania FOR EACH STATEMENT
EXECUTE PROCEDURE zmieniono();

CREATE TRIGGER tr_pluton_upd AFTER UPDATE ON pluton FOR EACH ROW
EXECUTE PROCEDURE zmieniono();

CREATE TRIGGER tr_pluton_upd_2 AFTER UPDATE ON pluton FOR EACH STATEMENT
EXECUTE PROCEDURE zmieniono();

CREATE TRIGGER tr_druzyna_upd AFTER UPDATE ON druzyna FOR EACH ROW
EXECUTE PROCEDURE zmieniono();

CREATE TRIGGER tr_druzyna_upd_2 AFTER UPDATE ON druzyna FOR EACH STATEMENT
EXECUTE PROCEDURE zmieniono();

CREATE TRIGGER tr_nalezy_upd AFTER UPDATE ON nalezy FOR EACH ROW
EXECUTE PROCEDURE zmieniono();

CREATE TRIGGER tr_nalezy_upd_2 AFTER UPDATE ON nalezy FOR EACH STATEMENT
EXECUTE PROCEDURE zmieniono();

CREATE TRIGGER tr_zolnierz_upd AFTER UPDATE ON zolnierz FOR EACH ROW
EXECUTE PROCEDURE zmieniono();

CREATE TRIGGER tr_zolnierz_upd_2 AFTER UPDATE ON zolnierz FOR EACH STATEMENT
EXECUTE PROCEDURE zmieniono();

CREATE FUNCTION dodano() RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
RAISE NOTICE 'Dodano rekord';
RETURN NEW;
END;
$$;

CREATE TRIGGER tr_kompania_add AFTER INSERT ON kompania FOR EACH ROW
EXECUTE PROCEDURE dodano();

CREATE TRIGGER tr_kompania_add_2 AFTER INSERT ON kompania FOR EACH STATEMENT
EXECUTE PROCEDURE dodano();

CREATE TRIGGER tr_pluton_add AFTER INSERT ON pluton FOR EACH ROW
EXECUTE PROCEDURE dodano();

CREATE TRIGGER tr_pluton_add_2 AFTER INSERT ON pluton FOR EACH STATEMENT
EXECUTE PROCEDURE dodano();

CREATE TRIGGER tr_druzyna_add AFTER INSERT ON druzyna FOR EACH ROW
EXECUTE PROCEDURE dodano();

CREATE TRIGGER tr_druzyna_add_2 AFTER INSERT ON druzyna FOR EACH STATEMENT
EXECUTE PROCEDURE dodano();

CREATE TRIGGER tr_nalezy_add AFTER INSERT ON nalezy FOR EACH ROW
EXECUTE PROCEDURE dodano();

CREATE TRIGGER tr_nalezy_add_2 AFTER INSERT ON nalezy FOR EACH STATEMENT
EXECUTE PROCEDURE dodano();

CREATE TRIGGER tr_zolnierz_add AFTER INSERT ON zolnierz FOR EACH ROW
EXECUTE PROCEDURE dodano();

CREATE TRIGGER tr_zolnierz_add_2 AFTER INSERT ON zolnierz FOR EACH STATEMENT
EXECUTE PROCEDURE dodano();